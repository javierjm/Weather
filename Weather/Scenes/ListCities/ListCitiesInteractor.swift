//
//  ListCitiesInteractor.swift
//  Weather
//
//  Created by Javier Jara on 11/15/17.
//  Copyright (c) 2017 jjsoft. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import CoreLocation

protocol ListCitiesBusinessLogic {
  func fetchLocationAndCities(request: ListCities.FetchCities.Request)
}

protocol ListCitiesDataStore {
    var cities: [City]? { get }
}

class ListCitiesInteractor:NSObject, ListCitiesBusinessLogic, ListCitiesDataStore {
    
    var presenter: ListCitiesPresentationLogic?
    var worker: ListCitiesWorker?
    var locationManager = CLLocationManager()
    var cities: [City]?

    
    var request = ListCities.FetchCities.Request()
    var coordinates = (lat: "", lon: "") {
        didSet {
            fetchCities(request: self.request)
        }
    }

    func fetchCities(request: ListCities.FetchCities.Request) {
        worker = ListCitiesWorker(citiesStore: WeatherAPI())
        worker?.fetchCities(lat: coordinates.lat, lon: coordinates.lon, completionHandler: { (result: CitiesStoreResult<[City]>) in
            switch(result){
                case .Failure(let error):
                    print("There was an error fetching cities: \(error.localizedDescription)")
                    // Call presenter with error description
                    self.presenter?.presentError(response: error)
                case .Success(let results):
                    self.cities = results
                    let response = ListCities.FetchCities.Response(cities: results)
                    self.presenter?.presentCities(response: response)
            }
        })
    }

    
    func fetchLocationAndCities(request: ListCities.FetchCities.Request) {
        self.request = request
        locationManager.delegate = self
        locationManager.requestLocation()
        locationManager.desiredAccuracy = kCLLocationAccuracyBest
        locationManager.requestWhenInUseAuthorization()

    }
}

extension ListCitiesInteractor:  CLLocationManagerDelegate {

    func locationManager(_ manager: CLLocationManager, didUpdateLocations locations: [CLLocation]) {
        let userLocation:CLLocation = locations[0] as CLLocation
        self.coordinates = (String(describing: userLocation.coordinate.latitude), String(describing: userLocation.coordinate.longitude))
    }
    
    func locationManager(_ manager: CLLocationManager, didFailWithError error: Error) {
            // Presenter must show error
            print("Error \(error.localizedDescription)")
    }
}
