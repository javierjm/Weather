//
//  ListCitiesViewController.swift
//  Weather
//
//  Created by Javier Jara on 11/15/17.
//  Copyright (c) 2017 jjsoft. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol ListCitiesDisplayLogic: class {
    func displayCities(viewModel: ListCities.FetchCities.ViewModel)
    func presentError(response: Error)
}

class ListCitiesViewController: UITableViewController, ListCitiesDisplayLogic {
    var interactor: ListCitiesBusinessLogic?
    var router: (NSObjectProtocol & ListCitiesRoutingLogic & ListCitiesDataPassing)?
    var displayedCities: [ListCities.FetchCities.ViewModel.DisplayedCity] = []
    var lastUpdate = ""

  // MARK: Object lifecycle
  
  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }
  
  required init?(coder aDecoder: NSCoder) {
    super.init(coder: aDecoder)
    setup()
  }
  
  // MARK: Setup
  
  private func setup() {
    let viewController = self
    let interactor = ListCitiesInteractor()
    let presenter = ListCitiesPresenter()
    let router = ListCitiesRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }
  
  // MARK: Routing
  
  override func prepare(for segue: UIStoryboardSegue, sender: Any?)
  {
    if let scene = segue.identifier {
      let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
      if let router = router, router.responds(to: selector) {
        router.perform(selector, with: segue)
      }
    }
  }
  
  // MARK: View lifecycle
  
  override func viewDidLoad() {
    super.viewDidLoad()
    let navigationTitleFont = UIFont(name: "Arvo", size: 22)!
    self.navigationController?.navigationBar.titleTextAttributes = [NSAttributedStringKey.font: navigationTitleFont,NSAttributedStringKey.foregroundColor: Constants.Colors.applicationLightBlue]

    
    getLocalWeather()
  }
  
  func getLocalWeather(){
    let request = ListCities.FetchCities.Request()
    interactor?.fetchCities(request: request)
  }
  
  
    func displayCities(viewModel: ListCities.FetchCities.ViewModel) {
        displayedCities = viewModel.displayedCities
        lastUpdate = viewModel.lastUpdate
        tableView.reloadData()
    }
    
    func presentError(response: Error) {
        
    }
}

extension ListCitiesViewController {
    
    override func numberOfSections(in tableView: UITableView) -> Int{
        return 1
    }
    
    override func tableView(_ tableView: UITableView, titleForHeaderInSection section: Int) -> String? {
        return lastUpdate
    }
    
    override func tableView(_ tableView: UITableView, willDisplayHeaderView view:UIView, forSection: Int) {
        if let headerTitle = view as? UITableViewHeaderFooterView {
            headerTitle.textLabel?.textColor = Constants.Colors.applicationLightBlue
            headerTitle.textLabel?.font = UIFont(name: Constants.Fonts.applicationRegularArvo, size: 10)
        }
    }
    
    
    override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return displayedCities.count
    }
    
    override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let displayedCity = displayedCities[indexPath.row]
        let cell = tableView.dequeueReusableCell(withIdentifier: "ListCitiesCell", for: indexPath) as! ListCitiesCell
        cell.configureWithModel(displayedCity)
        
        return cell
    }
    
    override func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
    
    }
}

protocol Configurable {
    associatedtype T
    var viewModel: T? { get set }
    func configureWithModel(_: T)
}

class ListCitiesCell: UITableViewCell, Configurable {
    @IBOutlet weak var wheaterImage: UIImageView!
    @IBOutlet weak var cityNameLabel: UILabel!
    @IBOutlet weak var tempetartureLabel: UILabel!
    
    var viewModel: ListCities.FetchCities.ViewModel.DisplayedCity?
    
    
    func configureWithModel(_ viewModel: ListCities.FetchCities.ViewModel.DisplayedCity) {
        self.viewModel = viewModel
        self.cityNameLabel.text = viewModel.name
        self.tempetartureLabel.text = viewModel.temperature
        self.wheaterImage.image = UIImage(named: viewModel.weatherImageName)
    }
}
